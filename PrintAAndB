1. user flag and number==================
public class ThreadPrintDemo3{

  static volatile int num = 0;
  static volatile boolean flag = false;

  public static void main(String[] args) {

    Thread t1 = new Thread(() -> {
      while (10 > num) {
        if (!flag && (num == 0 || ++num % 2 == 0)) {

          try {
            Thread.sleep(0);// 防止打印速度过快导致混乱
          } catch (InterruptedException e) {
            //NO
          }

          System.out.println(Thread.currentThread().getName()+":  "+num);
          flag = true;
        }
      }
    }
    );

    Thread t2 = new Thread(() -> {
      while (10 > num ) {
        if (flag && (++num % 2 != 0)) {

          try {
            Thread.sleep(0);// 防止打印速度过快导致混乱
          } catch (InterruptedException e) {
            //NO
          }

          System.out.println(Thread.currentThread().getName()+":  "+num);
          flag = false;
        }
      }
    }
    );

    t1.start();
    t2.start();

  }
}

2. use wait and notify

public class DigitPrinterExample {

    public static void main(String[] args) {
        Number num = new Number();

        OddPriter oddPriter = new OddPriter(num);
        EvenPrinter evenPrinter = new EvenPrinter(num);

        Thread oddthread = new Thread(oddPriter);
        Thread eventhread = new Thread(evenPrinter);

        oddthread.start();
        eventhread.start();
    }
}

class Number{
    int i = 0;
    boolean flag = true;
}

/**
 * 打印奇数得线程
 */
class OddPriter implements Runnable{
    Number num;

    public OddPriter(Number num) {
        this.num = num;
    }

    @Override
    public void run() {
        while (num.i <= 10){

            //同步锁保证一致性
            synchronized (num){
                if(num.flag){
                    try{
                        num.wait();
                    }catch (InterruptedException e){
                        e.printStackTrace();
                    }

                }else{
                    System.out.println(" jishu:  " + num.i);
                    num.i++;
                    num.flag = true;
                    num.notify();
                }
            }
        }
    }
}

/**
 * 打印偶数的线程
 */
class EvenPrinter implements Runnable{
    Number num;

    public EvenPrinter(Number num) {
        this.num = num;
    }

    @Override
    public void run() {
        while (num.i <= 10){
            synchronized (num){
                if (!num.flag){
                    try {
                        num.wait();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }else{
                    System.out.println(" oushu:  " + num.i);
                    num.i++;
                    num.flag = false;
                    num.notify();
                }
            }
        }
    }
}

3. use one thread 
public class DigitPrinterExample {

    public static void main(String[] args) {
        Number num = new Number();

        //OddPriter oddPriter = new OddPriter(num);
        EvenPrinter evenPrinter = new EvenPrinter(num);

        Thread oddthread = new Thread(evenPrinter);
        Thread eventhread = new Thread(evenPrinter);

        oddthread.start();
        eventhread.start();
    }
}

class Number{
    int i = 0;
    boolean flag = true;
}

/**
 * 打印偶数的线程
 */
class EvenPrinter implements Runnable{
    Number num;

    public EvenPrinter(Number num) {
        this.num = num;
    }

    @Override
    public void run() {
        while (num.i <= 10){
            synchronized (num){
                if (!num.flag){
                   // try {
                         System.out.println(Thread.currentThread().getName()+"== jishu:  " + num.i);
                          num.i++;
                          num.flag = true;
                        //num.wait();
                       // num.notify();
                    //} catch (InterruptedException e) {
                    //    e.printStackTrace();
                    //}
                    
                }else{
                    System.out.println(Thread.currentThread().getName()+"==  oushu:  " + num.i);
                    num.i++;
                    num.flag = false;
                    //try {
                    //num.wait();
                     //num.notify();
                   // } catch (InterruptedException e) {
                    //    e.printStackTrace();
                   // }
                   
                }
            }
        }
    }
}

Thread-0==  oushu:  0
Thread-0== jishu:  1
Thread-0==  oushu:  2
Thread-0== jishu:  3
Thread-0==  oushu:  4
Thread-0== jishu:  5
Thread-0==  oushu:  6
Thread-0== jishu:  7
Thread-0==  oushu:  8
Thread-0== jishu:  9
Thread-0==  oushu:  10

use one thread sucess

package Thread.WaitNotify;

import java.util.List;

public class Subtract {
	   private String lock;

	    public Subtract(String lock) {
	        super();
	        this.lock = lock;
	    }

	    public void subtract() throws InterruptedException {
	        synchronized (lock) {
//	                while(ValueObject.list.size() == 0) {//将这里的if改成while即可保证不出现越界异常!!!!
//	                    System.out.println("wait is ready to begin. ThreadName= "
//	                            + Thread.currentThread().getName());
//	                    Thread.sleep(2000);
//	                    lock.wait();
//	                    //Thread.sleep(5000);
//	                    System.out.println("wait is ended. ThreadName= "
//	                            + Thread.currentThread().getName());
//	                }
				while (ValueObject.list.size()>0) {	            		
					 System.out.println("ThreadName= "
			                    + Thread.currentThread().getName()+":"+ValueObject.list.get(0));
					 ValueObject.list.remove(0);
					 if(ValueObject.list.size()%2==0){
						 lock.notify();
						 System.out.println("ThreadName= "
				                    + Thread.currentThread().getName()+": wo kai shi notify" );
					 }
					 Thread.sleep(1000);
					 System.out.println("ThreadName= "
			                    + Thread.currentThread().getName()+": wo jin ru le wait" );
					 lock.wait();
					 System.out.println("ThreadName= "
			                    + Thread.currentThread().getName()+":   wait hou" );
					 Thread.sleep(1000);
					 if(ValueObject.list.size()%2==0){
						 lock.notify();
						 System.out.println("ThreadName= "
				                    + Thread.currentThread().getName()+": wo kai shi notify hou mian de" );
					 }
					 
				}
//	                System.out.println(ValueObject.list.toString());
//	                ValueObject.list.remove(0);
//	                System.out.println(Thread.currentThread().getName()+" list size=" + ValueObject.list.size());
			}
	    }
}

another sample:::
package domain;

public class HelloWorld {

    public static void main(String[] args) {
       ObjectTest num=new ObjectTest();
        MyThread4 mt = new MyThread4(num);
        new Thread(mt).start();
        new Thread(mt).start();
        new Thread(mt).start();
    }
    
}

class ObjectTest{
        int i = 0;
        boolean flag = true;
    }
    
class MyThread4 implements Runnable {
    private int ticket=21;
    ObjectTest num;

    public MyThread4(ObjectTest num) {
        this.num = num;
    }
    @Override
    public void run() {
         synchronized (num){
            while(ticket>0){
                System.out.println(Thread.currentThread().getName()+" Sold ticket i:" + ticket);
                ticket--;
                if(ticket%2!=0){
                   num.notify();
                }
                 try {
                        num.wait();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                if(ticket%2!=0){
                   num.notify();
                }
            }
         }
    }
}

 ObjectTest num=new ObjectTest();
        MyThread4 mt = new MyThread4(num);
        new Thread(mt).start();
        new Thread(mt).start();
        new Thread(mt).start();
